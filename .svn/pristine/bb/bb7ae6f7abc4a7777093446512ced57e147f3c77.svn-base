<?php
/**
 * Zend Framework (http://framework.zend.com/)
 *
 * @link      http://github.com/zendframework/ZendSkeletonApplication for the canonical source repository
 * @copyright Copyright (c) 2005-2013 Zend Technologies USA Inc. (http://www.zend.com)
 * @license   http://framework.zend.com/license/new-bsd New BSD License
 */

namespace Model\Base;

use Zend\Db\Adapter\Adapter;
use Zend\Db\ResultSet\ResultSet;
use Zend\Db\Sql\Sql;


class BaseTableModel
{
    protected $adapter = null;
    protected $ServiceLocator = null;

    public function __construct(Adapter $adapter, $table)
    {
        $this->adapter = $adapter;
        $this->initialize();
    }

    /*public function testBase(){
    	try{
    	//sql 的写法和    WHERE条件  的写法，与原来的一样就可以了
    	
    	//例子1：select * from kd_oa_userinfo where name in ('admin','teacher') and user_id in ('686','687')
    	//$sql =  "select * from kd_oa_userinfo where name in (:string1) and user_id in (:user_id)";
    	//$sqlArg=array("user_id"=>array('686','687'),"string1"=>array("admin","teacher"));
    	
    	//例子2：select * from kd_oa_userinfo where name in ('admin','teacher') and user_id = '686'
    	$sql =  "select * from kd_oa_userinfo where name in (:string1) and sex in(:sex) and user_id != 0";
    	$sqlArg=array("user_id"=>'686',"string1"=>array("admin","teacher"),"sex"=>array("man","woman"));
    	
    	/*+++++++++++++++++++转换过程【开始】+++++++++++++++++++++++++*/
    	//$newArg=array();
    	//foreach ($sqlArg as $argKey => $argVal){
    	//	if(is_array($argVal)){
    			//如果是数组，默认是IN,并对SQL进行替换
    	//		$valString=implode("','", $argVal);

    	//		$sql=str_replace(":$argKey", "'".$valString."'",$sql);
    	//	}else{
    	//		$newArg[$argKey]=$argVal;
    	//	}
    	//}
    	/*+++++++++++++++++++转换过程【结束】+++++++++++++++++++++++++*/
    	
    	//sql 的执行过程与结果返回代码一致
    	/*$statementContainer  = $this->adapter->createStatement($sql);
    	$result = $statementContainer->execute($newArg);
    	$resultSet = new ResultSet;
    	$resultSet->initialize($result);
    	$result = $resultSet->toArray();
    	var_dump($result);
    	exit();
    	} catch (\Exception $e) {
          echo  $e->getMessage().$e->getTraceAsString();
        }
    }*/
    
    /**
     * 获取对应的翻译，要提前系SYS翻译表加好数据
     * @param string $alias 表或视图的别名
     * @return msg,array
     */
    public function getTableTranslate($alias){
	    	$alias=strtoupper($alias);
	    	$ret=$this->sqlexec("select `column` `key`,`translate`  `value`,`alias` from view_kd_sys_translate where alias=:alias",array('alias'=>$alias));
	    
	    	if($ret['result']){
	    		return $ret;
	    	}else{
	    		return array('result'=>false,'msg'=>$ret['msg']);
	    	}
    }
    
    /**
     *  生成随机数
     */
    public function randomkeys($length)
    {
        $key = "";
        $pattern='1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLOMNOPQRSTUVWXYZ';
        for($i=0;$i<$length;$i++)
        {
            $key .= $pattern{mt_rand(0,35)};    //生成php随机数
        }
        return $key;
    }
    
    /**
     * 直接SQL操作数据库，不要用;号来一次操作多个SQL
     * @param string $sql
     * @param array $sqlArg sql里面对应的参数
     * @return 如果是SELECT会返回数组，如果INSERT会返回插入完的生成的主键，update/delete返回TRUE/FALSE和MSG
     */
    protected function sqlexec($sql, $sqlArg = array())
    {
       
        try {
        	
			/*数组与字符串转换*/
        	$newArg=array();
        	foreach ($sqlArg as $argKey => $argVal){
        		if(is_array($argVal)){
        			//如果是数组，默认是IN,并对SQL进行替换
        			$valString=implode("','", $argVal);
        			 
        			$sql=str_replace(":$argKey", "'".$valString."'",$sql);
        		}else{
        			$newArg[$argKey]=$argVal;
        		}
        	}
        	 
            //echo $sql ;
            //替换/R/T/N
            $sql=str_replace(array("\r\n", "\r", "\n","\t"), " ", $sql);
            //检查冒号与数组数量的对应关系
            if (strstr($sql, 'select') || strstr($sql, 'SELECT'))
            {
            	if(substr_count($sql,':')>count($newArg))
            	{
            		return  array("result"=>false,"msg"=>"SQLEXEC:执行查询操作时，参数sqlArg数组内参数要多于SQL语句参数".$sql);//传入的sqlArg数组的参数数量应该多于SQL语句参数
            	}
            	
            }
            else
            {
            	if(substr_count($sql,':')!=count($newArg))
            	{
            		return  array("result"=>false,"msg"=>"SQLEXEC:执行插入、删除、更新操作时，参数sqlArg数组与SQL语句参数要一致，不能多也不能少".$sql);
            	}
            }
            
            $statement = $this->adapter->createStatement($sql);
            
//             var_dump($statement->getSql());
            
            $result = $statement->execute($newArg);
         //   $sql_str_6 = strtolower(substr($sql, 0, 6));
            preg_match_all('/([a-zA-Z]+)/',$sql,$match);
           	$sql_str_6 =  strtolower($match[0][0]);
            if ($sql_str_6 == 'insert') {
                return array('result' => true, 'msg' => $result->getGeneratedValue());
            }
            
            elseif ($sql_str_6 == 'delete') {
            	return array('result' => true, 'msg' => $result->getAffectedRows());
            }
            
            elseif ($sql_str_6 == 'update') {
            	return array('result' => true, 'msg' => $result->getAffectedRows());
            }

            elseif ($sql_str_6 == 'select') {
                $resultSet = new ResultSet;
                $resultSet->initialize($result);
                return array('result' => true, 'msg' => $resultSet->toArray());
            }
            
            elseif (strstr($sql, 'foreign_key_checks') || strstr($sql, 'FOREIGN_KEY_CHECKS')) {
            	return array('result' => true, 'msg' => '');
            }
            return array('result' => false, 'msg' => "sqlexec 执行出错，相应的SQL：" . $statement->getSql());
        } catch (\Exception $e) {
            $e =new \model\KG_Base\NxyjwException($e->getMessage(),$e->getCode(),$e->getPrevious());
            return array("result" => false, "msg" => "SQLEXEC:异常" . $e->getMessage() . $sql);
        }
    }

    /*
     * 更简便的update做法，在复杂的选择条件下，可能不适用
     * */
    protected function updateTableSimpleSql($table, $setArray, $whereString)
    {
        $sql = new Sql($this->adapter);
        $updateSql = $sql->Update();
        $updateSql->table($table);
        $updateSql->set($setArray);
        $updateSql->where($whereString);
        $statement = $sql->prepareStatementForSqlObject($updateSql);
        //echo $statement->getSql();//DEBUG查看没填参数的SQL
        $result = $statement->execute();
        $resultSet = new ResultSet;
        $resultSet->initialize($result);
        return array('result' => true, 'msg' => $result->getAffectedRows());
    }

    protected function insertTableSimpleSql($table, $valueArray)
    {
        try {
            $sql = new Sql($this->adapter);
            $insertSql = $sql->insert();
            $insertSql->into($table);
            $insertSql->values($valueArray);
            $statement = $sql->prepareStatementForSqlObject($insertSql);
            //echo $statement->getSql();  //DEBUG查看没填参数的SQL
            $result = $statement->execute();
            $resultSet = new ResultSet;
            $resultSet->initialize($result);
            return array('result' => true, 'msg' => $result->getGeneratedValue());
        } catch (\Exception $e) {
            $e =new \model\KG_Base\NxyjwException($e->getMessage(),$e->getCode(),$e->getPrevious());
            return array('result' => false, 'msg' => $e->getMessage());
        }
    }

    /**
     * 生成sql的部分语句
     * 主要用于判断传入参数是否为空，然后生成对应的语句,减少重复语句
     */
	public function generateSql($arrValue,$sqlkey,$key,$tableName)
	{
		$sql = "";
		if($arrValue=="%%")
		{
			$sql = "($tableName.$sqlkey is null or $tableName.$sqlkey like :$key) ";
		}
		else if($arrValue != null)
		{
			$sql = "($tableName.$sqlkey like :$key) ";
		}
		else
		{
			$sql = "($tableName.$sqlkey is null) ";
		}
		return $sql;
	}
    
    /*
     * 要删除
     * 将药库的代码搬过来了
 * $colName,应该像这样array('email', 'username')，只查询这两个字段
 * @$retType: 返回数据类型
 * @$sort: 排序字段 @$order: 排序类型（递增或递减）
 * @$offset: 开始查询表记录位置
 * @$rows：返回记录数量
 * @$where: 模糊搜索用的(用于where确定搜索时key使用'DB_WHERE_eq',example: $where = array('DB_WHERE_eq1' => 'ID=2', 'DB_WHERE_eq2' => "GOODSNAME = 'test'");)
 * @$group: array, group by, 使用前提：$colName必须不为空
 * @$whereOr: 同where，进行sql条件搜索，但是时是or搜索
 */
    public function getTableRow($tableName, $colName = null,$where = null, $sort = null, $order = null, $offset = null, $rows = null,  $group = null, $whereOr = null)
    {

        /*
         * if ($retType == 'all') { $statement = $this->adapter->query ( "select
         * count(*) from \"{$tableName}\"" ); $result =
         * $statement->execute (); $arr = array (); while ($result->valid () ) {
         * $arr [] = $result->current (); $result->next (); } return
         * $arr[0]['COUNT(*)']; }
         */
        if (isset ($colName)) {
            $newData = null;
            foreach ($colName as $key => $value) {
                $upper = strtoupper($key);
                $newData [$upper] = $value;
            }
            $colName = $newData;
        }
        $sql = new Sql ($this->adapter);
        $select = $sql->select();

        if (!$colName) {
            $select->from($tableName)->columns(array(
                '*'
            ));
        } else {
            $select->from($tableName)->columns($colName);
        }

        if ($where !== null) {
            $SQLlikeStr = null;
            $num = count($where);
            $tmp = 1;

            foreach ($where as $key => $valuetmp) {
                if ($valuetmp === "is null") {
                    if ($tmp < $num) {
                        $SQLlikeStr .= "$key is null and ";
                    } else {
                        $SQLlikeStr .= "$key is null ";
                    }
                } else {
                    if (strstr($key, 'TIME') || strstr($key, 'DATE')) {
                        if (strlen($valuetmp) <= 0) {
                            $tmp++;
                            continue;
                        }
                        if (strlen($valuetmp) > 24) {
                            $timePrev = substr($valuetmp, 0, 19);
                            $timeNext = substr($valuetmp, -19, 19);

                        } else {
                            // 日期范围的两个参数
                            $timePrev = substr($valuetmp, 0, 10) . ' 00:00:00';
                            $timeNext = substr($valuetmp, -10, 10) . ' 23:59:59';
                        }
                        if ($tmp < $num) {
                            $SQLlikeStr .= $key . ' > TO_DATE(\'' . $timePrev . '\', \'YYYY-MM-DD  HH24:mi:ss\') and ' . $key . ' < TO_DATE(\'' . $timeNext . '\', \'YYYY-MM-DD  HH24:mi:ss\') and ';
                        } else {
                            $SQLlikeStr .= $key . ' > TO_DATE(\'' . $timePrev . '\', \'YYYY-MM-DD  HH24:mi:ss\') and ' . $key . ' < TO_DATE(\'' . $timeNext . '\', \'YYYY-MM-DD  HH24:mi:ss\') ';
                        }
                    } else if (strpos($key, 'DB_WHERE_eq') === 0 || strpos($key, 'DB_WHERE_eq')) {
                        //用于where确定搜索example: $where = array('DB_WHERE_eq1' => 'ID=2', 'DB_WHERE_eq2' => "GOODSNAME = 'test'");
                        if (strstr($valuetmp, '!')) ///带非的
                        {

                            $positionEqual = strpos($valuetmp, '=');
                            $valueKey = substr($valuetmp, 0, $positionEqual - 1);
                            $valueValue = substr($valuetmp, $positionEqual + 1);

                            if ($tmp < $num) {
                                $SQLlikeStr .= "$valueKey != '$valueValue' and ";
                            } else {
                                $SQLlikeStr .= "$valueKey != '$valueValue' ";
                            }
                            //echo $SQLlikeStr;
                        } else {
                            $positionEqual = strpos($valuetmp, '=');
                            $valueKey = substr($valuetmp, 0, $positionEqual);
                            $valueValue = substr($valuetmp, $positionEqual + 1);

                            if ($tmp < $num) {
                                $SQLlikeStr .= "$valueKey = '$valueValue' and ";
                            } else {
                                $SQLlikeStr .= "$valueKey = '$valueValue' ";
                            }
                        }
                    } else {
                        if (strlen($valuetmp) <= 0) {
                            $tmp++;
                            continue;
                        }
                        if ($tmp < $num) {
                            $SQLlikeStr .= "$key like '%$valuetmp%' and ";
                        } else {
                            $SQLlikeStr .= "$key like '%$valuetmp%' ";
                        }
                    }
                }
                $tmp++;
            }
            $SQLlikeStr = $SQLlikeStr . "end";
            $SQLlikeStr = str_replace('and end', '', $SQLlikeStr);
            $SQLlikeStr = str_replace('end', '', $SQLlikeStr);

            if (strlen($SQLlikeStr) > 0) {
                $select->where($SQLlikeStr);
            }
        }

        if ($whereOr !== null) {
            $SQLlikeStr = null;
            $num = count($whereOr);
            $tmp = 1;

            foreach ($whereOr as $key => $value) {
                if (strpos($key, 'DB_WHERE_eq') === 0 || strpos($key, 'DB_WHERE_eq')) {
                    //用于where确定搜索example: $where = array('DB_WHERE_eq1' => 'ID=2', 'DB_WHERE_eq2' => "GOODSNAME = 'test'");
                    $positionEqual = strpos($value, '=');
                    $valueKey = substr($value, 0, $positionEqual);
                    $valueValue = substr($value, $positionEqual + 1);

                    if ($tmp < $num) {
                        $SQLlikeStr .= "$valueKey = '$valueValue' or ";
                    } else {
                        $SQLlikeStr .= "$valueKey = '$valueValue' ";
                    }
                } else {
                    if ($tmp < $num) {
                        $SQLlikeStr .= "$key like '%$value%' or ";
                    } else {
                        $SQLlikeStr .= "$key like '%$value%' ";
                    }
                }
                $tmp++;
            }

            if (strlen($SQLlikeStr) > 0) {
                $select->where($SQLlikeStr);
            }
        }

        if ($group !== null) {
            $select->group($group);
        }

        if ($sort !== null) {
            if ($order !== null) {
                $select->order($sort . ' ' . $order);
            } else {
                $select->order($sort . ' ' . '
					asc');
            }
        }

        if ($offset !== null) {
            $select->offset($offset);
        }

        if ($rows !== null) {
            $select->limit($rows);
        }

        //  echo $select->getSqlString ();
        // \Model\DB\Utilities\SysLog::DB ($select->getSqlString());
        // exit();
        $arr = array();
        try {
            $statement = $sql->prepareStatementForSqlObject($select);
            //echo $statement->getSql(); exit;
            $results = $statement->execute();
            //var_dump($results);
            if ($results->isQueryResult()) {
                $resultSet = new ResultSet;
                $resultSet->initialize($results);
                $arr = $resultSet->toArray();

               // var_dump($retArr);
            }
//            while ($results->valid()) {
//                $tmpRet  =$results->current();
//                if($tmpRet!= false)
//                $arr [] = $tmpRet;
//                $results->next();
//            }
        } catch (\Exception $e) {
            $e =new \model\KG_Base\NxyjwException($e->getMessage(),$e->getCode(),$e->getPrevious());
            return array(
                'result' => false,
                'msg' => $e->getMessage()
            );
        }
        return
            array(
                'result' => true,
                'msg' => $arr
            );

    }

}


